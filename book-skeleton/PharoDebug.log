
*** Warning: PRReferenceNotFound: Can't find anchor named 'Non-uniform circles'

*** Warning: PRReferenceNotFound: Can't find anchor named 'Non-uniform circles'
THERE_BE_DRAGONS_HERE
ZnInvalidUTF8: Invalid utf8 input detected
31 March 2015 1:51:40.889013 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo3.0 [Latest update: #30863]

UTF8TextConverter>>errorMalformedInput
	Receiver: an UTF8TextConverter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		latin1Map: 	#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ...etc...
		latin1Encodings: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ...etc...


UTF8TextConverter>>nextFromStream:
	Receiver: an UTF8TextConverter
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/home/peter/prog/pillar/roassal/Layout/Layout.po...etc...
		character1: 	$Â‰
		value1: 	137
		character2: 	$P
		value2: 	80
		unicode: 	nil
		character3: 	$N
		value3: 	78
		character4: 	nil
		value4: 	nil
	Receiver's instance variables: 
		latin1Map: 	#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ...etc...
		latin1Encodings: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ...etc...


MultiByteFileStream>>next
	Receiver: MultiByteFileStream: '/home/peter/prog/pillar/roassal/Layout/Layout.post.pillar'
	Arguments and temporary variables: 
		char: 	nil
		secondChar: 	nil
		state: 	nil
	Receiver's instance variables: 



[ 
(ch := self next) == nil
	or: [ 
		(delimiters includes: ch)
			and: [ 
				aBlock value: ch.
				true ] ] ] in MultiByteFileStream>>upToAnyOf:do:
	Receiver: MultiByteFileStream: '/home/peter/prog/pillar/roassal/Layout/Layout.post.pillar'
	Arguments and temporary variables: 
		delimiters: 	a CharacterSet(Character lf Character cr)
		aBlock: 	[ :char | 
char = Character cr
	ifTrue: [ self peekFor: Character lf ] ...etc...
		stream: 	a WriteStream
		ch: 	nil
	Receiver's instance variables: 



ByteString class(SequenceableCollection class)>>new:streamContents:
	Receiver: ByteString
	Arguments and temporary variables: 
		newSize: 	1000
		blockWithArg: 	[ 
(ch := self next) == nil
	or: [ 
		(delimiters includes: ch)
	...etc...
		stream: 	a WriteStream
	Receiver's instance variables: 
		superclass: 	String
		methodDict: 	a MethodDictionary(#asByteArray->ByteString>>#asByteArray #asKeyCom...etc...
		format: 	23554
		layout: 	a ByteLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ByteString
		classPool: 	a Dictionary(#NonAsciiMap->#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Strings'
		traitComposition: 	{}
		localSelectors: 	nil


MultiByteFileStream>>upToAnyOf:do:
	Receiver: MultiByteFileStream: '/home/peter/prog/pillar/roassal/Layout/Layout.post.pillar'
	Arguments and temporary variables: 
		delimiters: 	a CharacterSet(Character lf Character cr)
		aBlock: 	[ :char | 
char = Character cr
	ifTrue: [ self peekFor: Character lf ] ...etc...
	Receiver's instance variables: 



MultiByteFileStream(PositionableStream)>>nextLine
	Receiver: MultiByteFileStream: '/home/peter/prog/pillar/roassal/Layout/Layout.post.pillar'
	Arguments and temporary variables: 

	Receiver's instance variables: 



PRTextParser>>handleNoEndMarkupFoundIn:
	Receiver: a PRTextParser
	Arguments and temporary variables: 
		aString: 	'[[['
	Receiver's instance variables: 
		currentMarkup: 	'[[['
		currentStart: 	1
		documentParser: 	a PRDocumentParser
		itemParser: 	PRScript
		alreadySeenString: 	'[[['
		currentStop: 	0
		stream: 	MultiByteFileStream: '/home/peter/prog/pillar/roassal/Layout/Layout.pos...etc...


PRTextParser>>parse:
	Receiver: a PRTextParser
	Arguments and temporary variables: 
		aString: 	'[[['
		workingString: 	'[[['
	Receiver's instance variables: 
		currentMarkup: 	'[[['
		currentStart: 	1
		documentParser: 	a PRDocumentParser
		itemParser: 	PRScript
		alreadySeenString: 	'[[['
		currentStop: 	0
		stream: 	MultiByteFileStream: '/home/peter/prog/pillar/roassal/Layout/Layout.pos...etc...


PRDocumentParser>>parseTopText:
	Receiver: a PRDocumentParser
	Arguments and temporary variables: 
		aString: 	'[[['
	Receiver's instance variables: 
		document: 	a PRDocument[849608704]
		stream: 	MultiByteFileStream: '/home/peter/prog/pillar/roassal/Layout/Layout.pos...etc...
		matcherManager: 	nil


PRParagraph class>>parse:with:
	Receiver: PRParagraph
	Arguments and temporary variables: 
		aString: 	'[[['
		aParser: 	a PRDocumentParser
	Receiver's instance variables: 
		superclass: 	PRDocumentGroup
		methodDict: 	a MethodDictionary(#accept:->PRParagraph>>#accept: )
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	{PRAnnotatedParagraph. PREmptyParagraph}
		name: 	#PRParagraph
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Pillar-Model-Document'
		traitComposition: 	{}
		localSelectors: 	nil


[ :itemParser | itemParser parse: aString with: self ] in PRDocumentParser>>parseLine:
	Receiver: a PRDocumentParser
	Arguments and temporary variables: 
		aString: 	'[[['
		itemParser: 	PRParagraph
	Receiver's instance variables: 
		document: 	a PRDocument[849608704]
		stream: 	MultiByteFileStream: '/home/peter/prog/pillar/roassal/Layout/Layout.pos...etc...
		matcherManager: 	nil


PRMatcherManager>>withItemParserForLine:do:
	Receiver: a PRMatcherManager
	Arguments and temporary variables: 
		aLine: 	'[[['
		aBlock: 	[ :itemParser | itemParser parse: aString with: self ]
	Receiver's instance variables: 
		textMarkups: 	#('[[[' '{{{' '""' '@@' '--' '==' '''''' '__' '^^' '+' '*')
		lineMarkups: 	#('@@' '= ' '%' '|' '_' '#' ':' '@' '!' ';' '-')


PRDocumentParser>>parseLine:
	Receiver: a PRDocumentParser
	Arguments and temporary variables: 
		aString: 	'[[['
	Receiver's instance variables: 
		document: 	a PRDocument[849608704]
		stream: 	MultiByteFileStream: '/home/peter/prog/pillar/roassal/Layout/Layout.pos...etc...
		matcherManager: 	nil


PRDocumentParser>>parse
	Receiver: a PRDocumentParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		document: 	a PRDocument[849608704]
		stream: 	MultiByteFileStream: '/home/peter/prog/pillar/roassal/Layout/Layout.pos...etc...
		matcherManager: 	nil


PRDocumentParser class>>parseStream:
	Receiver: PRDocumentParser
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/home/peter/prog/pillar/roassal/Layout/Layout.po...etc...
	Receiver's instance variables: 
		superclass: 	PRBasicObject
		methodDict: 	a MethodDictionary(#add:->PRDocumentParser>>#add: #addNested:->PRDo...etc...
		format: 	136
		layout: 	a FixedLayout
		instanceVariables: 	#(#document #stream #matcherManager)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PRDocumentParser
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Pillar-Model-Core'
		traitComposition: 	{}
		localSelectors: 	nil


PRDocumentParser class>>parse:
	Receiver: PRDocumentParser
	Arguments and temporary variables: 
		aStringOrStream: 	MultiByteFileStream: '/home/peter/prog/pillar/roassal/Layout/L...etc...
	Receiver's instance variables: 
		superclass: 	PRBasicObject
		methodDict: 	a MethodDictionary(#add:->PRDocumentParser>>#add: #addNested:->PRDo...etc...
		format: 	136
		layout: 	a FixedLayout
		instanceVariables: 	#(#document #stream #matcherManager)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PRDocumentParser
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Pillar-Model-Core'
		traitComposition: 	{}
		localSelectors: 	nil


[ :input | 
| input2 |
"The following are here because of case #12259: 'FileSystem memory reads/writes using a binary stream by default'."
input2 := input.
(aFile fileSystem store isKindOf: MemoryStore)
	ifTrue: [ input2 := input2 contents asString readStream ].
PRDocumentParser parse: input2 ] in PRExportConfiguration>>parseFile:
	Receiver: a PRExportConfiguration[653787136]
	Arguments and temporary variables: 
		aFile: 	File @ /home/peter/prog/pillar/roassal/Layout/Layout.post.pillar
		input: 	MultiByteFileStream: '/home/peter/prog/pillar/roassal/Layout/Layout.post...etc...
		input2: 	MultiByteFileStream: '/home/peter/prog/pillar/roassal/Layout/Layout.pos...etc...
	Receiver's instance variables: 
		properties: 	a Dictionary('baseDirectory'->File @ /home/peter/prog/pillar/roassa...etc...
		parent: 	a PRExportConfiguration[48234496]


[ aBlock value: stream ] in FileReference(AbstractFileReference)>>readStreamDo:
	Receiver: File @ /home/peter/prog/pillar/roassal/Layout/Layout.post.pillar
	Arguments and temporary variables: 
		aBlock: 	[ :input | 
| input2 |
"The following are here because of case #12259: ...etc...
		stream: 	MultiByteFileStream: '/home/peter/prog/pillar/roassal/Layout/Layout.pos...etc...
	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path / 'home' / 'peter' / 'prog' / 'pillar' / 'roassal' / 'Layout' / 'Lay...etc...


BlockClosure>>ensure:
	Receiver: [ aBlock value: stream ]
	Arguments and temporary variables: 
		aBlock: 	[ stream close ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	FileReference(AbstractFileReference)>>readStreamDo:
		startpc: 	34
		numArgs: 	0


FileReference(AbstractFileReference)>>readStreamDo:
	Receiver: File @ /home/peter/prog/pillar/roassal/Layout/Layout.post.pillar
	Arguments and temporary variables: 
		aBlock: 	[ :input | 
| input2 |
"The following are here because of case #12259: ...etc...
		stream: 	MultiByteFileStream: '/home/peter/prog/pillar/roassal/Layout/Layout.pos...etc...
	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path / 'home' / 'peter' / 'prog' / 'pillar' / 'roassal' / 'Layout' / 'Lay...etc...


PRExportConfiguration>>parseFile:
	Receiver: a PRExportConfiguration[653787136]
	Arguments and temporary variables: 
		aFile: 	File @ /home/peter/prog/pillar/roassal/Layout/Layout.post.pillar
	Receiver's instance variables: 
		properties: 	a Dictionary('baseDirectory'->File @ /home/peter/prog/pillar/roassa...etc...
		parent: 	a PRExportConfiguration[48234496]


[ :file | 
| document writer |
document := self parseFile: file.
document next ifNil: [ document next: nextDocument ].
nextDocument := document.
writer := self instantiateWriter
	configuration: self;
	yourself.
self outputFile: file , writer fileExtension.
[ self write: document using: writer ]
	on: PRExportError
	do: [ :err | 
		err
			inputFile: file;
			signal ] ] in PRExportConfiguration>>exportSeparatedOutputFiles
	Receiver: a PRExportConfiguration[653787136]
	Arguments and temporary variables: 
		nextDocument: 	nil
		file: 	File @ /home/peter/prog/pillar/roassal/Layout/Layout.post.pillar
		document: 	nil
		writer: 	nil
	Receiver's instance variables: 
		properties: 	a Dictionary('baseDirectory'->File @ /home/peter/prog/pillar/roassa...etc...
		parent: 	a PRExportConfiguration[48234496]


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(File @ /home/peter/prog/pillar/roassal/Layout/Layout.post.pillar)
	Arguments and temporary variables: 
		aBlock: 	[ :file | 
| document writer |
document := self parseFile: file.
docume...etc...
		index: 	1
	Receiver's instance variables: 
an Array(File @ /home/peter/prog/pillar/roassal/Layout/Layout.post.pillar)

PRExportConfiguration>>exportSeparatedOutputFiles
	Receiver: a PRExportConfiguration[653787136]
	Arguments and temporary variables: 
		nextDocument: 	nil
	Receiver's instance variables: 
		properties: 	a Dictionary('baseDirectory'->File @ /home/peter/prog/pillar/roassa...etc...
		parent: 	a PRExportConfiguration[48234496]


PRExportConfiguration>>export
	Receiver: a PRExportConfiguration[653787136]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		properties: 	a Dictionary('baseDirectory'->File @ /home/peter/prog/pillar/roassa...etc...
		parent: 	a PRExportConfiguration[48234496]


PRExportConfiguration>>export:
	Receiver: a PRExportConfiguration[48234496]
	Arguments and temporary variables: 
		configurationName: 	'LaTeX by chapter'
	Receiver's instance variables: 
		properties: 	a Dictionary('baseDirectory'->File @ /home/peter/prog/pillar/roassa...etc...
		parent: 	nil


[ subconfName ifNil: [ configuration export ] ifNotNil: [ configuration export: subconfName ] ] in PRExportCommandLineHandler>>export
	Receiver: a PRExportCommandLineHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a Session
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver
		baseDirectory: 	File @ /home/peter/prog/pillar/roassal
		configuration: 	a PRExportConfiguration[48234496]
		subconfName: 	'LaTeX by chapter'


BlockClosure>>on:do:
	Receiver: [ subconfName ifNil: [ configuration export ] ifNotNil: [ configuration export: subconfNam...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :error | self exitFailure: error messageText ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	PRExportCommandLineHandler>>export
		startpc: 	53
		numArgs: 	0


PRExportCommandLineHandler>>export
	Receiver: a PRExportCommandLineHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a Session
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver
		baseDirectory: 	File @ /home/peter/prog/pillar/roassal
		configuration: 	a PRExportConfiguration[48234496]
		subconfName: 	'LaTeX by chapter'


PRExportCommandLineHandler>>activate
	Receiver: a PRExportCommandLineHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a Session
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver
		baseDirectory: 	File @ /home/peter/prog/pillar/roassal
		configuration: 	a PRExportConfiguration[48234496]
		subconfName: 	'LaTeX by chapter'


PRExportCommandLineHandler class(CommandLineHandler class)>>activateWith:
	Receiver: PRExportCommandLineHandler
	Arguments and temporary variables: 
		aCommandLine: 	a CommandLineArguments
	Receiver's instance variables: 
		superclass: 	PRWithConfigurationCommandLineHandler
		methodDict: 	a MethodDictionary(#activate->PRExportCommandLineHandler>>#activate...etc...
		format: 	144
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PRExportCommandLineHandler
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Pillar-Cli'
		traitComposition: 	{}
		localSelectors: 	nil


[ aCommandLinehandler activateWith: commandLine ] in PRCommandLineHandler(BasicCommandLineHandler)>>activateSubCommand:
	Receiver: a PRCommandLineHandler
	Arguments and temporary variables: 
		aCommandLinehandler: 	PRExportCommandLineHandler
	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a Session
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver


BlockClosure>>on:do:
	Receiver: [ aCommandLinehandler activateWith: commandLine ]
	Arguments and temporary variables: 
		exception: 	Exit
		handlerAction: 	[ :exit | ^ self handleExit: exit for: aCommandLinehandler ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	PRCommandLineHandler(BasicCommandLineHandler)>>activateSubCommand...etc...
		startpc: 	34
		numArgs: 	0


PRCommandLineHandler(BasicCommandLineHandler)>>activateSubCommand:
	Receiver: a PRCommandLineHandler
	Arguments and temporary variables: 
		aCommandLinehandler: 	PRExportCommandLineHandler
	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a Session
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver


PRCommandLineHandler(BasicCommandLineHandler)>>handleSubcommand
	Receiver: a PRCommandLineHandler
	Arguments and temporary variables: 
		handlers: 	an OrderedCollection(PRExportCommandLineHandler)
	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a Session
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver


PRCommandLineHandler(BasicCommandLineHandler)>>handleArgument:
	Receiver: a PRCommandLineHandler
	Arguments and temporary variables: 
		aString: 	'export'
	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a Session
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver


[ self handleArgument: (self arguments ifEmpty: [ '' ] ifNotEmpty: [ :arguments | arguments first ]) ] in PRCommandLineHandler(BasicCommandLineHandler)>>activate
	Receiver: a PRCommandLineHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a Session
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver


BlockClosure>>on:do:
	Receiver: [ self handleArgument: (self arguments ifEmpty: [ '' ] ifNotEmpty: [ :arguments | argument...etc...
	Arguments and temporary variables: 
		exception: 	Exit
		handlerAction: 	[ :exit | ^ self handleExit: exit ]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	PRCommandLineHandler(BasicCommandLineHandler)>>activate
		startpc: 	49
		numArgs: 	0



--- The full stack ---
UTF8TextConverter>>errorMalformedInput
UTF8TextConverter>>nextFromStream:
MultiByteFileStream>>next
[ 
(ch := self next) == nil
	or: [ 
		(delimiters includes: ch)
			and: [ 
				aBlock value: ch.
				true ] ] ] in MultiByteFileStream>>upToAnyOf:do:
ByteString class(SequenceableCollection class)>>new:streamContents:
MultiByteFileStream>>upToAnyOf:do:
MultiByteFileStream(PositionableStream)>>nextLine
PRTextParser>>handleNoEndMarkupFoundIn:
PRTextParser>>parse:
PRDocumentParser>>parseTopText:
PRParagraph class>>parse:with:
[ :itemParser | itemParser parse: aString with: self ] in PRDocumentParser>>parseLine:
PRMatcherManager>>withItemParserForLine:do:
PRDocumentParser>>parseLine:
PRDocumentParser>>parse
PRDocumentParser class>>parseStream:
PRDocumentParser class>>parse:
[ :input | 
| input2 |
"The following are here because of case #12259: 'FileSystem memory reads/writes using a binary stream by default'."
input2 := input.
(aFile fileSystem store isKindOf: MemoryStore)
	ifTrue: [ input2 := input2 contents asString readStream ].
PRDocumentParser parse: input2 ] in PRExportConfiguration>>parseFile:
[ aBlock value: stream ] in FileReference(AbstractFileReference)>>readStreamDo:
BlockClosure>>ensure:
FileReference(AbstractFileReference)>>readStreamDo:
PRExportConfiguration>>parseFile:
[ :file | 
| document writer |
document := self parseFile: file.
document next ifNil: [ document next: nextDocument ].
nextDocument := document.
writer := self instantiateWriter
	configuration: self;
	yourself.
self outputFile: file , writer fileExtension.
[ self write: document using: writer ]
	on: PRExportError
	do: [ :err | 
		err
			inputFile: file;
			signal ] ] in PRExportConfiguration>>exportSeparatedOutputFiles
Array(SequenceableCollection)>>reverseDo:
PRExportConfiguration>>exportSeparatedOutputFiles
PRExportConfiguration>>export
PRExportConfiguration>>export:
[ subconfName ifNil: [ configuration export ] ifNotNil: [ configuration export: subconfName ] ] in PRExportCommandLineHandler>>export
BlockClosure>>on:do:
PRExportCommandLineHandler>>export
PRExportCommandLineHandler>>activate
PRExportCommandLineHandler class(CommandLineHandler class)>>activateWith:
[ aCommandLinehandler activateWith: commandLine ] in PRCommandLineHandler(BasicCommandLineHandler)>>activateSubCommand:
BlockClosure>>on:do:
PRCommandLineHandler(BasicCommandLineHandler)>>activateSubCommand:
PRCommandLineHandler(BasicCommandLineHandler)>>handleSubcommand
PRCommandLineHandler(BasicCommandLineHandler)>>handleArgument:
[ self handleArgument: (self arguments ifEmpty: [ '' ] ifNotEmpty: [ :arguments | arguments first ]) ] in PRCommandLineHandler(BasicCommandLineHandler)>>activate
BlockClosure>>on:do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PRCommandLineHandler(BasicCommandLineHandler)>>activate
PRCommandLineHandler class(CommandLineHandler class)>>activateWith:
[ aCommandLinehandler activateWith: commandLine ] in PharoCommandLineHandler(BasicCommandLineHandler)>>activateSubCommand:
BlockClosure>>on:do:
PharoCommandLineHandler(BasicCommandLineHandler)>>activateSubCommand:
PharoCommandLineHandler(BasicCommandLineHandler)>>handleSubcommand
PharoCommandLineHandler(BasicCommandLineHandler)>>handleArgument:
[ self handleArgument: (self arguments ifEmpty: [ '' ] ifNotEmpty: [ :arguments | arguments first ]) ] in PharoCommandLineHandler(BasicCommandLineHandler)>>activate
BlockClosure>>on:do:
PharoCommandLineHandler(BasicCommandLineHandler)>>activate
PharoCommandLineHandler>>activate
PharoCommandLineHandler class(CommandLineHandler class)>>activateWith:
[ super activateWith: aCommandLine ] in PharoCommandLineHandler class>>activateWith:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
World doOneCycle.
Processor yield.
false ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

Processes and their stacks: 
Process: a Process in nil
  stack:

Array(SequenceableCollection)>>do:
[ :logger | 
logger
	nextPutAll: 'Processes and their stacks: ';
	cr.
Process allInstances
	do: [ :each | 
		| ctx |
		logger
			nextPutAll: 'Process: ';
			print: each;
			cr;
			nextPutAll: '  stack:';
			cr;
			cr.
		ctx := each isActiveProcess
			ifTrue: [ thisContext sender ]
			ifFalse: [ each suspendedContext ].
		ctx
			ifNotNil: [ 
				(ctx stackOfSize: 20)
					do: [ :s | 
						logger
							print: s;
							cr ] ].
		logger
			nextPutAll: '------------------------------';
			cr;
			cr ] ] in [ 
Smalltalk logError: aString inContext: aContext.	" Print stacks of all current processes "
Smalltalk
	logDuring: [ :logger | 
		logger
			nextPutAll: 'Processes and their stacks: ';
			cr.
		Process allInstances
			do: [ :each | 
				| ctx |
				logger
					nextPutAll: 'Process: ';
					print: each;
					cr;
					nextPutAll: '  stack:';
					cr;
					cr.
				ctx := each isActiveProcess
					ifTrue: [ thisContext sender ]
					ifFalse: [ each suspendedContext ].
				ctx
					ifNotNil: [ 
						(ctx stackOfSize: 20)
							do: [ :s | 
								logger
									print: s;
									cr ] ].
				logger
					nextPutAll: '------------------------------';
					cr;
					cr ] ] ] in NonInteractiveUIManager(CommandLineUIManager)>>quitFrom:withMessage:
[ 
logStream := self openLog.
aMonadicBlock value: logStream ] in SmalltalkImage>>logDuring:
BlockClosure>>ensure:
SmalltalkImage>>logDuring:
[ 
Smalltalk logError: aString inContext: aContext.	" Print stacks of all current processes "
Smalltalk
	logDuring: [ :logger | 
		logger
			nextPutAll: 'Processes and their stacks: ';
			cr.
		Process allInstances
			do: [ :each | 
				| ctx |
				logger
					nextPutAll: 'Process: ';
					print: each;
					cr;
					nextPutAll: '  stack:';
					cr;
					cr.
				ctx := each isActiveProcess
					ifTrue: [ thisContext sender ]
					ifFalse: [ each suspendedContext ].
				ctx
					ifNotNil: [ 
						(ctx stackOfSize: 20)
							do: [ :s | 
								logger
									print: s;
									cr ] ].
				logger
					nextPutAll: '------------------------------';
					cr;
					cr ] ] ] in NonInteractiveUIManager(CommandLineUIManager)>>quitFrom:withMessage:
BlockClosure>>ensure:
NonInteractiveUIManager(CommandLineUIManager)>>quitFrom:withMessage:
NonInteractiveUIManager(CommandLineUIManager)>>unhandledErrorDefaultAction:
[ :class | class default unhandledErrorDefaultAction: self exception ] in UnhandledError>>defaultAction
[ :v | ^ oneArgBlock value: v ] in SystemDictionary(Dictionary)>>at:ifPresent:ifAbsent:
BlockClosure>>cull:
SystemDictionary(Dictionary)>>at:ifPresent:
SystemDictionary(Dictionary)>>at:ifPresent:ifAbsent:
UnhandledError>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
------------------------------

Process: a Process in Delay class>>handleTimerEvent
  stack:

Delay class>>handleTimerEvent
Delay class>>runTimerEventLoop
[ self runTimerEventLoop ] in Delay class>>startTimerEventLoop
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
------------------------------

Process: a Process in [ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
  stack:

[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
------------------------------

Process: a Process in [ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
  stack:

[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
------------------------------

Process: a Process in [ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
  stack:

[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
------------------------------

Process: a Process in [ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
  stack:

[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
------------------------------

Process: a Process in InputEventFetcher>>waitForInput
  stack:

InputEventFetcher>>waitForInput
InputEventFetcher>>eventLoop
[ self eventLoop ] in InputEventFetcher>>installEventLoop
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
------------------------------

Process: a Process in SmalltalkImage>>lowSpaceWatcher
  stack:

SmalltalkImage>>lowSpaceWatcher
[ self lowSpaceWatcher ] in SmalltalkImage>>installLowSpaceWatcher
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
------------------------------

Process: a Process in [ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
  stack:

[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
------------------------------

Process: a Process in WeakArray class>>finalizationProcess
  stack:

WeakArray class>>finalizationProcess
[ self finalizationProcess ] in WeakArray class>>restartFinalizationProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
------------------------------


*** Warning: PRReferenceNotFound: Can't find anchor named ' DCWorkbench - top level window of DynaCASE
'

*** Warning: PRReferenceNotFound: Can't find anchor named ' DCNavigator - sidebar displaying all models available in the opened project
'

*** Warning: PRReferenceNotFound: Can't find anchor named ' DCWorkbench - top level window of DynaCASE
'

*** Warning: PRReferenceNotFound: Can't find anchor named ' DCNavigator - sidebar displaying all models available in the opened project
'

*** Warning: PRReferenceNotFound: Can't find anchor named ' DCWorkbench - top level window of DynaCASE
'

*** Warning: PRReferenceNotFound: Can't find anchor named ' DCNavigator - sidebar displaying all models available in the opened project
'

*** Warning: PRReferenceNotFound: Can't find anchor named ' DCWorkbench - top level window of DynaCASE
'

*** Warning: PRReferenceNotFound: Can't find anchor named ' DCNavigator - sidebar displaying all models available in the opened project
'

*** Warning: PRReferenceNotFound: Can't find anchor named 'Palette'

*** Warning: PRReferenceNotFound: Can't find anchor named 'DCDynamicForm'

*** Warning: PRReferenceNotFound: Can't find anchor named 'Palette'

*** Warning: PRReferenceNotFound: Can't find anchor named 'DCDynamicForm'

*** Warning: PRReferenceNotFound: Can't find anchor named 'Palette'

*** Warning: PRReferenceNotFound: Can't find anchor named 'DCDynamicForm'

*** Warning: PRReferenceNotFound: Can't find anchor named 'Palette'

*** Warning: PRReferenceNotFound: Can't find anchor named 'DCDynamicForm'

*** Warning: PRReferenceNotFound: Can't find anchor named '../Pillar/Palette'

*** Warning: PRReferenceNotFound: Can't find anchor named 'DCDynamicForm'

*** Warning: PRReferenceNotFound: Can't find anchor named '../Pillar/Palette'

*** Warning: PRReferenceNotFound: Can't find anchor named 'DCDynamicForm'

*** Warning: PRReferenceNotFound: Can't find anchor named '../Palette/Palette'

*** Warning: PRReferenceNotFound: Can't find anchor named 'DCDynamicForm'

*** Warning: PRReferenceNotFound: Can't find anchor named '../Palette/Palette'

*** Warning: PRReferenceNotFound: Can't find anchor named 'DCDynamicForm'

*** Warning: PRReferenceNotFound: Can't find anchor named '../Palette/Palette.html'

*** Warning: PRReferenceNotFound: Can't find anchor named 'DCDynamicForm'

*** Warning: PRReferenceNotFound: Can't find anchor named '../Palette/Palette.html'

*** Warning: PRReferenceNotFound: Can't find anchor named 'DCDynamicForm'

*** Warning: PRReferenceNotFound: Can't find anchor named 'DCDynamicForm'

*** Warning: PRReferenceNotFound: Can't find anchor named 'DCDynamicForm'

*** Warning: PRReferenceNotFound: Can't find anchor named '../Palette/Palette.html'

*** Warning: PRReferenceNotFound: Can't find anchor named 'DCDynamicForm'

*** Warning: PRReferenceNotFound: Can't find anchor named '../Palette/Palette.html'

*** Warning: PRReferenceNotFound: Can't find anchor named 'DCDynamicForm'

*** Warning: PRReferenceNotFound: Can't find anchor named 'Palette/Palette'

*** Warning: PRReferenceNotFound: Can't find anchor named 'DCDynamicForm'

*** Warning: PRReferenceNotFound: Can't find anchor named 'Palette/Palette'

*** Warning: PRReferenceNotFound: Can't find anchor named 'DCDynamicForm'

*** Warning: PRReferenceNotFound: Can't find anchor named 'Palette/Palette.pillar'

*** Warning: PRReferenceNotFound: Can't find anchor named 'DCDynamicForm'

*** Warning: PRReferenceNotFound: Can't find anchor named 'Palette/Palette.pillar'

*** Warning: PRReferenceNotFound: Can't find anchor named 'DCDynamicForm'

*** Warning: PRReferenceNotFound: Can't find anchor named 'Palette/Palette'

*** Warning: PRReferenceNotFound: Can't find anchor named 'DCDynamicForm'

*** Warning: PRReferenceNotFound: Can't find anchor named 'Palette/Palette'

*** Warning: PRReferenceNotFound: Can't find anchor named 'DCDynamicForm'
