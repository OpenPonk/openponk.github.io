h1. Pkg-DynaCASE-OntoUML

!file://figures/ontoUML_Dyna_connection.png:file://figures/ontoUML_Dyna_connection.png!

Package contains the needed classes for representation of OntoUML diagrams. The classes extend the core of DynaCase. It uses package GMF-MetaModel as semantic model.

h2. Documentation of classes

h3. Controllers

h4. DCOmlController

DCOmlController is responsible for managing the OntoUML diagram. Class inherits the instance variables from its parent. 
Class also contains its own class variable - acceptsAsTarget which represents the list of controller classes which can be added to OntoUML diagram.

Class has only the methods defined in parent class. DCOmlController is also responsible for defining the look of the pallet for OntoUML diagram. 
It is done by overriding a method #initializePalette:


h4. DCOmlElementClassController

This is an abstract class that represents all non relational OntoUML elements. All relationships in OntoUML have one source element and one target element. DCOmlElementClassController implements adding element to both source and
target of a certain relationship. 
* addAsSourceFor: aController
* addAsTargetFor: aController

Both these methods check if aController is DCOmlRelationshipController. This class also overrides parent method 

* #buildEditorForm: It shows three text inputs in DCForm instead of just one name input, as every element has name, attributes and methods. 

This class also implements method #createFigure. Every non relational OntoUML element has the same visual interpretation; rectangle and this method creates its figure.

All of its children represent controllers of classes which they are named after.


h4. DCOmlRelationshipController

This is an abstract class that represents all relationships between elements in OntoUML. This class overrides the abstract methods from parent class: 
* #connectionFeedback 
* #createEdgeFrom:to:

The method #connectionFeedback is meant for temporary line which appears when the new relationship is created and the #createEdgeFrom:to creates the final edge.


h4. DCOmlBasicAssociationController

This class represents OntoUML associations between elements. It overrides parent method buildEditorForm:. It creates three text inputs for name, source multiplicity and target multiplicity.

h4. DCOmlGeneralizationController

This class represents OntoUML generalizations. It overrides two parent methods
* #connectionFeedback 
* #createEdgeFrom:to:

To add an empty narrow arrow head to the end of the line. 

h4. DCOmlMeronymicController

This abstract class represents the concept of OntoUML meronymic relationships. It overrides two parent method
* #buildEditorForm: this method creates text input for name and checkboxes to choose properties of meronymic relationship that will be created.
* #createEdgeFrom:to: to add the correctly filled diamond shaped arrow head to the end of the line. 

All of its children override parent method #connectionFeedback to draw the correct line when placing this relationship.

h1. GMF and GMF-MetaModel

The GMF is a separate project which is partly used in DynaCASE. The GMF-MetaModel package contains the model of OntoUML. However,  the GMF project as a whole is not fully incorporated in DynaCASE.
To be able to use model with DynaCASE some changes were made:
* the parent of Element class (the class at the top of model hierarchy ) was changed to DCNamedElement 
* as the replacement of ParentClass the Generalization class was added to represent the concept of inheritance 
* the Relationship class was added into the hierarchy
